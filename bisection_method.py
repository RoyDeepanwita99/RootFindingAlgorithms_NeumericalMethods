# -*- coding: utf-8 -*-
"""bisection-method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IsoVsNCHPlFKAJqlXdBOWvmIsTr6ncGY
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

def bisection(f, a, b, tol=1e-6, max_iter=100):
    roots = []
    errors = []

    for i in range(max_iter):
        c = (a + b) / 2
        error = abs(b - a) / 2
        errors.append(error)

        if error < tol:
            roots.append(c)
            break

        if f(c) == 0:
            roots.append(c)
            break
        elif f(a) * f(c) < 0:
            roots.append(c)
            b = c
        else:
            a = c

    return roots, errors


def f(x):
    return x**3 - 2*x**2 + 5


a = -2
b = 2

roots, errors = bisection(f, a, b)


max_len = max(len(roots), len(errors))
data = {'Roots': roots + [None] * (max_len - len(roots)), 'Errors': errors + [None] * (max_len - len(errors))}
df = pd.DataFrame(data)

print("Roots and Errors:")
print(df)

plt.plot(np.arange(len(errors)) +1, errors)
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Bisection Method Error Convergence')
plt.grid(True)
plt.show()